#!/bin/sh

set -e

: ${PKGBREW:="https://raw.githubusercontent.com/ta2gch/pkgbrew/master/bin/pkgbrew"}
: ${PKGHOME:="${HOME}/.pkgbrew"}
: ${PKGHOST:="https://github.com/jsonn/pkgsrc/archive/trunk.zip"}
: ${PKGSRC:="${PKGHOME}/src"}
version(){
    cat<<EOF
pkgbrew revision : 74a9949
pkgsrc   version : trunk
Copyright (c) 2016 TANIGUCHI Masaya

pkgbrew comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of pkgbrew under the terms of The BSD 2-Clause License.
For more infomation about these matters, see the file named LICENSE.
Homepage: https://github.com/ta2gch/pkgbrew
EOF
}
help(){
    cat<<EOF
pkgbrew <command> [<package>]
command:

    help		: show usage 
    search		: search packages
    tap                 : add user repository
    untap               : remove user repository
    version             : output version information
    update              : update repositories

    Build pkgsrc package 

    depends		: build and install dependencies
    fetch		: fetch distribution file(s)
    checksum		: fetch and check distribution file(s)
    extract		: look at unmodified source
    patch		: look at initial source
    configure		: stop after configure stage
    all or build	: stop after build stage
    stage-install	: install under stage directory
    test		: run package's self-tests, if any exist and supported
    package		: create binary package before installing it
    replace		: change (upgrade, downgrade, or just replace) installed package in-place
    deinstall		: deinstall previous package
    package-install	: install package and build binary package
    install		: install package
    bin-install		: attempt to skip building from source and use pre-built binary package
    show-depends        : print dependencies for building
    show-options        : print available options from options.mk

    Cleanup targets (in separate section because of importance):

    clean-depends	: remove work directories for dependencies
    clean		: remove work directory
    distclean		: remove distribution file(s)
    package-clean	: remove binary package

EOF
}
search(){
    package="${1}"
    find "${PKGSRC}" -maxdepth 2 \
	| grep "${package}"  \
	| sed --expression="s%${PKGSRC}/%%" 
}
download_1(){
    from="${1}"
    dist="${2}"
    if which wget > /dev/null ; then
	wget -O "${dist}" "${from}"
    elif which curl > /dev/null ; then
	curl -L -o "${dist}" -O "{from}"
    fi
}

download(){
    from="${1}"
    dist="${2}"
    case "${from}" in
	https://*) download_1 "${from}" "${dist}" ;;
	http://*) download_1 "${from}" "${dist}" ;;
	*) cp "${from}" "${dist}" ;;
    esac
}

convert_repository_name(){
    echo "${PKGSRC}/`echo ${1} | sed -e 's%/%-%g'`"
}

tap(){
    if [ -d `convert_repository_name "${1}"` ]; then
	echo repository already exits: ${1}
	exit 1;
    fi
    tap_without_check "${1}"
    echo ${1} >> "${PKGHOME}/etc/user-repositories"
}

tap_without_check(){
    workdir=`mktemp -d`
    
    download "https://github.com/${1}/archive/master.zip" \
	     "${workdir}/master.zip"
    
    echo Extracting files...

    unzip "${workdir}/master.zip" -d "${workdir}" > /dev/null
    
    echo Copying files...

    mv --force "${workdir}/`basename "${1}"`-master" \
       `convert_repository_name "${1}"`
}

untap(){
    if [ -z `echo ${1} | tr -d -c '/'` ]; then
	echo \'${1}\' is not user repository
	exit 1;
    elif [ ! -d `convert_repository_name "${1}"` ]; then
	echo repository already removed: ${1}
	exit 1;
    fi
    
    echo Deleting files...
    rm --recursive `convert_repository_name "${1}"`

    cp "${PKGHOME}/etc/user-repositories" \
       "${PKGHOME}/etc/user-repositories.bak"

    cat "${PKGHOME}/etc/user-repositories.bak" \
	| sed -e "s%${1}%#%g"                  \
	| sed -e "/#/d"                        \
	> "${PKGHOME}/etc/user-repositories"
}

update(){
    workdir=`mktemp -d`

    download "${PKGHOST}" "${workdir}/trunk.zip" 

    echo Extracing files...

    unzip "${workdir}/trunk.zip" -d "${workdir}" > /dev/null

    echo Copying files...

    mv --force "${workdir}/pkgsrc-trunk" "${PKGSRC}"

    if [ -f "${PKGHOME}/etc/user-repositories" ]; then
	cat "${PKGHOME}/etc/user-repositories" | while read $repo ;do
	    tap_without_check "$repo"
	done
    fi

    download "${PKGBREW}" "${PKGHOME}/bin/pkgbrew"

    chmod +x "${PKGHOME}/bin/pkgbrew"
}

run_command(){
    command="${1}"
    package="${PKGSRC}/${2}"

    if [ ! -n "${2}" -o ! -d "${package}" ]; then
	echo No package \'${2}\' found, did you mead:
	search "${2}" | sed --expression="s/^/ /"
	echo pkgbrew: package not found
	exit 1;
    fi

    cd "${package}"
    if [ "${command}" = "show-depends" -o "${command}" = "show-options" ]; then
	${PKGHOME}/bin/bmake "${command}" 
    else
	${PKGHOME}/bin/bmake "${command}" | awk "
BEGIN {
    flag=0
}

/^==========/ {
    if(flag == 1) {
	flag = 0;
	print;
    } else {
	flag = 1;
    }
}

/^=+>/ || flag == 1 {
    print;
}
"
    fi
}

main(){
    command="${1}"
    package="${2}"

    case "${command}" in
	"help") help ;;
	"search") search "${package}" ;;
	"tap") tap "${package}" ;;
	"untap") untap "${package}" ;;
	"version") version ;;
	"update") update ;;

	"help") run_command "${1}" "${2}" ;;
	"search") run_command "${1}" "${2}" ;;
	"setup") run_command "${1}" "${2}" ;;
	"depends") run_command "${1}" "${2}" ;;
	"fetch") run_command "${1}" "${2}" ;;
	"checksum") run_command "${1}" "${2}" ;;
	"extract") run_command "${1}" "${2}" ;;
	"patch") run_command "${1}" "${2}" ;;
	"configure") run_command "${1}" "${2}" ;;
	"all or build") run_command "${1}" "${2}" ;;
	"stage-install") run_command "${1}" "${2}" ;;
	"test") run_command "${1}" "${2}" ;;
	"package") run_command "${1}" "${2}" ;;
	"replace") run_command "${1}" "${2}" ;;
	"deinstall") run_command "${1}" "${2}" ;;
	"package-install") run_command "${1}" "${2}" ;;
	"install") run_command "${1}" "${2}" ;;
	"bin-install") run_command "${1}" "${2}" ;;
	"show-depends") run_command "${1}" "${2}" ;;
	"show-options") run_command "${1}" "${2}" ;;

	"clean-depends") run_command "${1}" "${2}" ;;
	"clean") run_command "${1}" "${2}" ;;
	"distclean") run_command "${1}" "${2}" ;;
	"package-clean") run_command "${1}" "${2}" ;;

	*)  echo Invalid command: ${1}
	    help ;;
    esac
}

main "${1}" "${2}"
