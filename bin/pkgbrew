#!/bin/sh

set -e

: ${PKGBREW:="https://raw.githubusercontent.com/ta2gch/pkgbrew/master/pkgbrew"}
: ${PKGHOME:="${HOME}/.pkgbrew"}
: ${PKGHOST:="http://ftp.jp.netbsd.org/pub/pkgsrc/stable/pkgsrc.tar.bz2"}
: ${PKGSRC:="${PKGHOME}/src"}


help(){
    cat<<EOF
pkgbrew <command> [<package>]
command:

    help		: show usage 
    search		: search packages

    Build pkgsrc package 

    depends		: build and install dependencies
    fetch		: fetch distribution file(s)
    checksum		: fetch and check distribution file(s)
    extract		: look at unmodified source
    patch		: look at initial source
    configure		: stop after configure stage
    all or build	: stop after build stage
    stage-install	: install under stage directory
    test		: run package's self-tests, if any exist and supported
    package		: create binary package before installing it
    replace		: change (upgrade, downgrade, or just replace) installed package in-place
    deinstall		: deinstall previous package
    package-install	: install package and build binary package
    install		: install package
    bin-install		: attempt to skip building from source and use pre-built binary package
    show-depends        : print dependencies for building
    show-options        : print available options from options.mk

    Cleanup targets (in separate section because of importance):

    clean-depends	: remove work directories for dependencies
    clean		: remove work directory
    distclean		: remove distribution file(s)
    package-clean	: remove binary package

EOF
}

search(){
    package="${1}"
    find "${PKGSRC}" -maxdepth 2 \
	| grep "${package}"  \
	| sed --expression="s%${PKGSRC}/%%" 
}

run_command(){
    command="${1}"
    package="${PKGSRC}/${2}"

    if [ ! -n "${2}" -o ! -d "${package}" ]; then
	echo No package \'${2}\' found, did you mead:
	cmd_search "${2}" | sed --expression="s/^/ /"
	echo pkgbrew: package not found
	exit 1;
    fi

    cd "${package}"
    ${PKGHOME}/bin/bmake "${command}"
}

main(){
    command="${1}"
    package="${2}"

    case "${command}" in
	"help") help ;;
	"search") search "${package}" ;;

	"help") run_command "${1}" "${2}" ;;
	"search") run_command "${1}" "${2}" ;;
	"setup") run_command "${1}" "${2}" ;;
	"depends") run_command "${1}" "${2}" ;;
	"fetch") run_command "${1}" "${2}" ;;
	"checksum") run_command "${1}" "${2}" ;;
	"extract") run_command "${1}" "${2}" ;;
	"patch") run_command "${1}" "${2}" ;;
	"configure") run_command "${1}" "${2}" ;;
	"all or build") run_command "${1}" "${2}" ;;
	"stage-install") run_command "${1}" "${2}" ;;
	"test") run_command "${1}" "${2}" ;;
	"package") run_command "${1}" "${2}" ;;
	"replace") run_command "${1}" "${2}" ;;
	"deinstall") run_command "${1}" "${2}" ;;
	"package-install") run_command "${1}" "${2}" ;;
	"install") run_command "${1}" "${2}" ;;
	"bin-install") run_command "${1}" "${2}" ;;
	"show-depends") run_command "${1}" "${2}" ;;
	"show-options") run_command "${1}" "${2}" ;;

	"clean-depends") run_command "${1}" "${2}" ;;
	"clean") run_command "${1}" "${2}" ;;
	"distclean") run_command "${1}" "${2}" ;;
	"package-clean") run_command "${1}" "${2}" ;;

	*)  echo Invalid command: ${1}
	    cmd_help ;;
    esac
}

main "${1}" "${2}"
